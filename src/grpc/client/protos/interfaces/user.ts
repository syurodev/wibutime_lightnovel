// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.1
//   protoc               v5.28.3
// source: src/grpc/client/protos/user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "com.zen.grpc.nodejs.user.service";

export interface FindOneDto {
  id: number;
}

export interface Empty {
}

export interface BaseResponse {
  status: number;
  message: string;
  data: Empty | undefined;
}

/** >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> GET_BASIC <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
export interface BasicUserResponse {
  status: number;
  message: string;
  data: BasicUserDataResponse | undefined;
}

export interface BasicUserDataResponse {
  id: number;
  nick_name: string;
  avatar: string;
}

export const COM_ZEN_GRPC_NODEJS_USER_SERVICE_PACKAGE_NAME = "com.zen.grpc.nodejs.user.service";

export interface UserServiceClient {
  getBasic(request: FindOneDto, metadata?: Metadata): Observable<BasicUserResponse>;
}

export interface UserServiceController {
  getBasic(
    request: FindOneDto,
    metadata?: Metadata,
  ): Promise<BasicUserResponse> | Observable<BasicUserResponse> | BasicUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getBasic"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
